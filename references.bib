@article{8890660,
  author={Akbulut, Akhan and Perros, Harry G.},
  journal={IEEE Internet Computing}, 
  title={Performance Analysis of Microservice Design Patterns}, 
  year={2019},
  volume={23},
  number={6},
  pages={19-27},
  keywords={Time factors;Logic gates;Computer architecture;Random access memory;Measurement;Internet;Message systems;Microservices;Design Patterns;Microservices Architecture;Performance Analysis;Software Architecture},
  doi={10.1109/MIC.2019.2951094}}

@inproceedings{inproceedings,
author = {Mendonça, Nabor and Aderaldo, Carlos and Cámara, Javier and Garlan, David},
year = {2020},
month = {02},
pages = {},
title = {Model-Based Analysis of Microservice Resiliency Patterns},
doi = {10.1109/ICSA47634.2020.00019}
}

@book{nygard2018release,
  title={Release It!: Design and Deploy Production-ready Software},
  author={Nygard, M.T.},
  isbn={9781680502398},
  lccn={2018459712},
  series={Pragmatic programmers},
  url={https://books.google.com.br/books?id=UW7jAQAACAAJ},
  year={2018},
  publisher={Pragmatic Bookshelf}
}

@article{martinfowler2014microservices,
  added-at = {2014-03-29T13:11:57.000+0100},
  author = {Fowler, Martin and Lewis, James},
  biburl = {https://www.bibsonomy.org/bibtex/2520e156d50e116dcd8e433cfccbdced3/soareschen},
  interhash = {12eba8def437547590a53a0439b4c6c8},
  intrahash = {520e156d50e116dcd8e433cfccbdced3},
  keywords = {application-architecture web-services},
  timestamp = {2014-03-29T14:07:33.000+0100},
  title = {Microservices},
  url = {http://martinfowler.com/articles/microservices.html},
  year = 2014
}

@book{alur2003core,
  title={Core J2EE Patterns: Best Practices and Design Strategies},
  author={Alur, D. and Crupi, J. and Malks, D.},
  isbn={9780131422469},
  lccn={2004266715},
  series={Core Series},
  url={https://books.google.com.br/books?id=1dx34EMVyi8C},
  year={2003},
  publisher={Prentice Hall PTR}
}

@INPROCEEDINGS{8330193,
  author={Khomh, Foutse and Guéhéneuc, Yann-Gaël},
  booktitle={2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={Design patterns impact on software quality: Where are the theories?}, 
  year={2018},
  volume={},
  number={},
  pages={15-25},
  keywords={Software quality;Software engineering;Computer languages;Vocabulary;Education;Conferences;Design patterns;software quality;quantitative studies;qualitative studies;retrospective},
  doi={10.1109/SANER.2018.8330193}}

@article{article,
author = {Mohammed, Mawal and Elish, Mahmoud},
year = {2017},
month = {10},
pages = {},
title = {Empirical assessment of design patterns' fault-proneness at different granularity levels},
volume = {2},
journal = {Advances in Computational Design},
doi = {10.12989/acd.2017.2.4.293}
}

@book{Newman:15:MS,
  added-at = {2015-09-09T21:30:50.000+0200},
  author = {Newman, Sam},
  biburl = {https://www.bibsonomy.org/bibtex/261a28f122c347b555b88a0d835080b6a/gron},
  description = {Building Microservices: Sam Newman: 9781491950357: Amazon.com: Books},
  edition = {1st},
  interhash = {cd274e4310da91cad9f07dfbed64cb9f},
  intrahash = {61a28f122c347b555b88a0d835080b6a},
  isbn = {978-1491950357},
  keywords = {Architecture Microservices SOA},
  month = {February},
  pages = 280,
  publisher = {O'Reilly Media},
  refid = {903609686},
  timestamp = {2015-09-09T21:30:50.000+0200},
  title = {Building Microservices: Designing Fine-Grained Systems},
  year = 2015
}

@book{harari2015sapiens,
  title={Sapiens: Uma breve hist{\'o}ria da humanidade},
  author={Harari, Y.N. and Marcoantonio, J.},
  isbn={9788525432407},
  url={https://books.google.com.br/books?id=uCt-BwAAQBAJ},
  year={2015},
  publisher={L\&PM Editores}
}

@article{kostenko2023antifragile,
  title={Antifragile Microservice Systems},
  author={Kostenko, BC ILLIA},
  year={2023},
  publisher={Masaryk University}
}

@INPROCEEDINGS{9779693,
  author={Palliwar, Aashay and Pinisetty, Srinivas},
  booktitle={2022 IEEE 19th International Conference on Software Architecture (ICSA)}, 
  title={Using Gossip Enabled Distributed Circuit Breaking for Improving Resiliency of Distributed Systems}, 
  year={2022},
  volume={},
  number={},
  pages={13-23},
  keywords={Analytical models;Protocols;Costs;Circuit breakers;Conferences;Microservice architectures;Model checking;Circuit Breaker;Formal Modeling and Analysis;Gossip Protocol;Microservices;Resiliency Patterns;Statistical Model Checking;Timed Automata;UPPAAL},
  doi={10.1109/ICSA53651.2022.00010}}

@book{richardson2018microservices,
  title={Microservices Patterns: With examples in Java},
  author={Richardson, C.},
  isbn={9781638356325},
  lccn={2018289404},
  url={https://books.google.com.br/books?id=QTgzEAAAQBAJ},
  year={2018},
  publisher={Manning}
}

@book{daya2016microservices,
  title={Microservices from Theory to Practice: Creating Applications in IBM Bluemix Using the Microservices Approach},
  author={Daya, S. and Van Duy, N. and Eati, K. and Ferreira, C.M. and Glozic, D. and Gucer, V. and Gupta, M. and Joshi, S. and Lampkin, V. and Martins, M. and others},
  isbn={9780738440811},
  url={https://books.google.com.br/books?id=eOZyCgAAQBAJ},
  year={2016},
  publisher={IBM Redbooks}
}

@article{baskarada2018,
author = {Baskarada, Sasa and Nguyen, Vivian and Koronios, Andy},
year = {2018},
month = {09},
pages = {1-9},
title = {Architecting Microservices: Practical Opportunities and Challenges},
volume = {60},
journal = {Journal of Computer Information Systems},
doi = {10.1080/08874417.2018.1520056}
}

@article{suprapto2021,
author = {Suprapto, Falahah and Surendro, Kridanto and Sunindyo, Wikan},
year = {2021},
month = {02},
pages = {012065},
title = {Circuit Breaker in Microservices: State of the Art and Future Prospects},
volume = {1077},
journal = {IOP Conference Series: Materials Science and Engineering},
doi = {10.1088/1757-899X/1077/1/012065}
}

@article{alashqar2022microservices,
  author    = {Abdelkareem M. Alashqar and Zaki Kurdya},
  title     = {Examining the Design Patterns of Microservices for Achieving Performance Quality Tactics},
  journal   = {International Journal of Academic Information Systems Research (IJAISR)},
  volume    = {6},
  number    = {12},
  pages     = {4--13},
  year      = {2022},
  month     = {December},
  issn      = {2643-9026},
  publisher = {Faculty of Information Technology, Islamic University of Gaza},
  address   = {P.O. Box 108, Gaza, Palestine},
  email     = {aashgar@yahoo.com, zkordya@gmail.com}
}

@article{troubitsyna2019,
  author    = {Elena Troubitsyna},
  title     = {Model-Driven Engineering of Fault Tolerant Microservices},
  year      = {2019},
  journal   = {Åbo Akademi University},
  address   = {Turku, Finland},
  email     = {Elena.Troubitsyna@abo.fi}
}

@article{Meiklejohn2024,
author = "Christopher Meiklejohn",
title = "{Resilient Microservice Applications, by Design, and without the Chaos}",
year = "2024",
month = "6",
url = "https://kilthub.cmu.edu/articles/thesis/Resilient_Microservice_Applications_by_Design_and_without_the_Chaos/25901422",
doi = "10.1184/R1/25901422.v1"
}

@book{huaylupo2021spring,
  author    = {Illary Huaylupo Sanchez and John Carnell},
  title     = {Spring Microservices in Action},
  edition   = {2. ed.},
  publisher = {Manning Publications},
  year      = {2021},
  address   = {Shelter Island, NY}
}

@article{mohapatra2013,
author = {Mohapatra, Subasish and Mohanty, Subhadarshini and Rekha, K.Smruti},
year = {2013},
month = {05},
pages = {17-21},
title = {Analysis of Different Variants in Round Robin Algorithms for Load Balancing in Cloud Computing},
volume = {69},
journal = {International Journal of Computer Applications},
doi = {10.5120/12103-8221}
}

@article{kumar2016,
author = {Kumar Mondal, Ranjan and Ray, Payel and Sarddar, Debabrata},
year = {2016},
month = {01},
pages = {1-21},
title = {Load Balancing},
volume = {4}
}

@book{bourke2001,
author = {Bourke, Tony},
title = {Server load balancing},
year = {2001},
isbn = {0596000502},
publisher = {O'Reilly \& Associates, Inc.},
address = {USA},
abstract = {Load balancing improves network performance by distributing traffic efficiently so that individual servers are not overwhelmed by sudden fluctuations in activity. Server Load Balancing is a guide to this critical component of high availability, clustering, and fault tolerance, all of which provide the infrastructure for reliable Internet sites and large corporate networks. Much of the information on load balancing comes from vendor-specific manuals that use inconsistent terminology and are often biased toward the products they cover. Server Load Balancing explains to engineers and technicians the concepts and terminology of load balancing and offers practical guidance for planning and implementing it in almost any environment. It includes a configuration guide with diagrams and sample configurations for installing, configuring, and maintaining products from the four major vendors: Alteon WebSystems, Cisco's CSS Series (formerly ArrowPoint), F5's BIG-IP, the Foundry ServerIron series. By comparing several load balancing products, you'll gain a deeper understanding of the technology and how best to use it to improve your network performance. No system administrator responsible for traffic management should be without this practical guide.}
}

@article{falkevych2023,
  author = {Falkevych, Vitalii and Lisniak, A.O.},
  title = {Methodology of Cache Invalidation in Microservices Architecture of the Web Applications},
  journal = {Scientific Notes of Taurida National V.I. Vernadsky University. Series: Technical Sciences},
  year = {2023},
  volume = {1},
  pages = {131--135},
  doi = {10.32782/2663-5941/2023.1/20}
}


@article{vattani2015,
author = {Vattani, Andrea and Chierichetti, Flavio and Lowenstein, Keegan},
year = {2015},
month = {04},
pages = {886-897},
title = {Optimal probabilistic cache stampede prevention},
volume = {8},
journal = {Proceedings of the VLDB Endowment},
doi = {10.14778/2757807.2757813}
}

@article{pamula2014,
  author    = {Narendra Babu Pamula and K. Jairam and B. Rajesh},
  title     = {Cache-Aside Approach For Cloud Design Pattern},
  journal   = {International Journal of Computer Science and Information Technologies (IJCSIT)},
  volume    = {5},
  number    = {2},
  pages     = {1423-1426},
  year      = {2014},
  publisher = {IJCSIT},
  url       = {https://www.ijcsit.com},
  note      = {V.KR., V.N.B \& A.G.K College of Engineering, Andhra Pradesh, India}
}

@unknown{hamad2023,
author = {Hamad, Hatem and Sahmoud, Thaer and Ghazala, Abed},
year = {2023},
month = {06},
pages = {},
title = {Convert Monolithic Application to Microservice Application}
}

@inproceedings{Kreps2011KafkaA,
  title={Kafka : a Distributed Messaging System for Log Processing},
  author={Jay Kreps},
  year={2011},
  url={https://api.semanticscholar.org/CorpusID:18534081}
}

@book{10.5555/3175825,
author = {Narkhede, Neha and Shapira, Gwen and Palino, Todd},
title = {Kafka: The Definitive Guide Real-Time Data and Stream Processing at Scale},
year = {2017},
isbn = {1491936169},
publisher = {O'Reilly Media, Inc.},
edition = {1st},
abstract = {Every enterprise application creates data, whether its log messages, metrics, user activity, outgoing messages, or something else. And how to move all of this data becomes nearly as important as the data itself. If youre an application architect, developer, or production engineer new to Apache Kafka, this practical guide shows you how to use this open source streaming platform to handle real-time data feeds. Engineers from Confluent and LinkedIn who are responsible for developing Kafka explain how to deploy production Kafka clusters, write reliable event-driven microservices, and build scalable stream-processing applications with this platform. Through detailed examples, youll learn Kafkas design principles, reliability guarantees, key APIs, and architecture details, including the replication protocol, the controller, and the storage layer. Understand publish-subscribe messaging and how it fits in the big data ecosystem. Explore Kafka producers and consumers for writing and reading messages Understand Kafka patterns and use-case requirements to ensure reliable data delivery Get best practices for building data pipelines and applications with Kafka Manage Kafka in production, and learn to perform monitoring, tuning, and maintenance tasks Learn the most critical metrics among Kafkas operational measurements Explore how Kafkas stream delivery capabilities make it a perfect source for stream processing systems}
}

@inproceedings{10.1145/3448016.3457556,
author = {Wang, Guozhang and Chen, Lei and Dikshit, Ayusman and Gustafson, Jason and Chen, Boyang and Sax, Matthias J. and Roesler, John and Blee-Goldman, Sophie and Cadonna, Bruno and Mehta, Apurva and Madan, Varun and Rao, Jun},
title = {Consistency and Completeness: Rethinking Distributed Stream Processing in Apache Kafka},
year = {2021},
isbn = {9781450383431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3448016.3457556},
doi = {10.1145/3448016.3457556},
abstract = {An increasingly important system requirement for distributed stream processing applications is to provide strong correctness guarantees under unexpected failures and out-of-order data so that its results can be authoritative (not needing complementary batch results). Although existing systems have put a lot of effort into addressing some specific issues, such as consistency and completeness, how to enable users to make flexible and transparent trade-off decisions among correctness, performance, and cost still remains a practical challenge. Specifically, similar mechanisms are usually applied to tackle both consistency and completeness, which can result in unnecessary performance penalties. We present Apache Kafka's core design for stream processing, which relies on its persistent log architecture as the storage and inter-processor communication layers to achieve correctness guarantees. Kafka Streams, a scalable stream processing client library in Apache Kafka, defines the processing logic as read-process-write cycles in which all processing state updates and result outputs are captured as log appends. Idempotent and transactional write protocols are utilized to guarantee exactly-once semantics. Furthermore, revision-based speculative processing is employed to emit results as soon as possible while handling out-of-order data. We also demonstrate how Kafka Streams behaves in practice with large-scale deployments and performance insights exhibiting its flexible and low-overhead trade-offs.},
booktitle = {Proceedings of the 2021 International Conference on Management of Data},
pages = {2602–2613},
numpages = {12},
keywords = {semantics, stream processing},
location = {Virtual Event, China},
series = {SIGMOD '21}
}

@misc{conway1968,  
  author = {Conway, Mel},  
  title = {How Committees Invent ({Conway’s Law})},  
  journal = {Datamation},  
  volume = {14},  
  number = {5},  
  year = {1968},  
  url = {http://www.melconway.com/research/committees.html},  
  note = {Disponível em: \url{http://www.melconway.com/research/committees.html}}  
}

@techreport{Michelson2006,
  author      = {Michelson, Brenda M.},
  title       = {Event-Driven Architecture Overview: Event-Driven SOA Is Just Part of the EDA Story},
  institution = {Patricia Seybold Group},
  year        = {2006},
  month       = {jan},
  doi         = {10.1571/bda2-2-06cc},
  url         = {http://dx.doi.org/10.1571/bda2-2-06cc}
}

@INPROCEEDINGS{9226286,
  author={Laigner, Rodrigo and Kalinowski, Marcos and Diniz, Pedro and Barros, Leonardo and Cassino, Carlos and Lemos, Melissa and Arruda, Darlan and Lifschitz, Sérgio and Zhou, Yongluan},
  booktitle={2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, 
  title={From a Monolithic Big Data System to a Microservices Event-Driven Architecture}, 
  year={2020},
  volume={},
  number={},
  pages={213-220},
  keywords={Computer architecture;Big Data;Software;Stakeholders;Software systems;Maintenance engineering;Aging;big data system;microservices;event-driven},
  doi={10.1109/SEAA51224.2020.00045}}

@book{10.5555/2904417,
author = {Richards, Mark},
title = {Software Architecture Patterns},
year = {2015},
isbn = {9781491925409},
publisher = {O'Reilly Media, Inc.},
abstract = {Just as developers use design patterns in software development, architects use well-defined architecture patterns to define the characteristics and shape of the architecture. Using the wrong architecture pattern (or no pattern at all) can sometimes be a very costly mistake resulting in an architecture that doesn't work. It is therefore vital that architects are aware of and understand the various architecture patterns available. During this webcast I will discuss several common architecture patterns, including the traditional layered architecture, microservices architecture, space-based architecture, event-driven architecture, and microkernel architecture. Along the way I will show real-world examples to demonstrate how the patterns work, as well as describe the pros and cons of each pattern. I will also discuss how requirements and operational aspects can drive which patterns to use. Using the right architecture pattern for your system is critical, because as we all know, once in place the architecture is very hard to change.}
}

@unknown{lazzari2021,
author = {Lazzari, Luan and Farias, Kleinner},
year = {2021},
month = {10},
pages = {},
title = {Event-Driven Architecture and REST: An Exploratory Study on Modularity},
doi = {10.48550/arXiv.2110.14699}
}

@article{Bashari2017,
author = {Bashari Rad, Babak and Bhatti, Harrison and Ahmadi, Mohammad},
year = {2017},
month = {03},
pages = {8},
title = {An Introduction to Docker and Analysis of its Performance},
volume = {173},
journal = {IJCSNS International Journal of Computer Science and Network Security}
}

@article{Potdar2020,
author = {Potdar, Amit and Narayan, DG and Kengond, Shivaraj and Mulla, Mohammed},
year = {2020},
month = {01},
pages = {1419-1428},
title = {Performance Evaluation of Docker Container and Virtual Machine},
volume = {171},
journal = {Procedia Computer Science},
doi = {10.1016/j.procs.2020.04.152}
}

@bachelorsthesis{Maia2020,
  author      = {Maia, Herick Maciel},
  title       = {An{\'a}lise de uso da tecnologia de software docker aplicando conteineriza{\c{c}}{\~a}o na computa{\c{c}}{\~a}o em nuvem},
  school      = {Universidade do Extremo Sul Catarinense (UNESC)},
  year        = {2020},
  type        = {Trabalho de Conclus{\~a}o de Curso},
  note        = {Orientador: Paulo Jo{\~a}o Martins},
  keywords    = {Desenvolvimento de software, Docker (Software), Websites},
  url         = {http://repositorio.unesc.net/handle/1/8845},
  urldate     = {2023-08-20},
  address     = {Crici{\'u}ma, SC},
  month       = dec,
  language    = {Portuguese}
}

@article{Silva2018,
author = {Silva, Vitor and Kirikova, Marite and Alksnis, Gundars},
year = {2018},
month = {05},
pages = {21-27},
title = {Containers for Virtualization: An Overview},
volume = {23},
journal = {Applied Computer Systems},
doi = {10.2478/acss-2018-0003}
}

@book{vitalino2016descomplicando,
  title={Descomplicando o Docker},
  author={Vitalino, J.F.N. and Castro, M.A.N.},
  isbn={9788574527970},
  url={https://books.google.com.br/books?id=6xnkDAAAQBAJ},
  year={2016},
  publisher={Brasport}
}

@inbook{Electrical2007,
author = {2007},
month = {07},
pages = {},
title = {ISO/IEC Standard for Systems and Software Engineering -- Recommended Practice for Architectural Description of Software-Intensive Systems},
isbn = {978-0-7381-5660-6},
journal = {ISO/IEC 42010 IEEE Std 1471-2000 First edition 2007-07-15},
doi = {10.1109/IEEESTD.2007.386501}
}

@inproceedings{10.1145/336512.336537,
author = {Garlan, David},
title = {Software architecture: a roadmap},
year = {2000},
isbn = {1581132530},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/336512.336537},
doi = {10.1145/336512.336537},
booktitle = {Proceedings of the Conference on The Future of Software Engineering},
pages = {91–101},
numpages = {11},
keywords = {software architecture, software design, software engineering},
location = {Limerick, Ireland},
series = {ICSE '00}
}


@Article{app10175797,
AUTHOR = {Tapia, Freddy and Mora, Miguel Ángel and Fuertes, Walter and Aules, Hernán and Flores, Edwin and Toulkeridis, Theofilos},
TITLE = {From Monolithic Systems to Microservices: A Comparative Study of Performance},
JOURNAL = {Applied Sciences},
VOLUME = {10},
YEAR = {2020},
NUMBER = {17},
ARTICLE-NUMBER = {5797},
URL = {https://www.mdpi.com/2076-3417/10/17/5797},
ISSN = {2076-3417},
ABSTRACT = {Currently, organizations face the need to create scalable applications in an agile way that impacts new forms of production and business organization. The traditional monolithic architecture no longer meets the needs of scalability and rapid development. The efficiency and optimization of human and technological resources prevail; this is why companies must adopt new technologies and business strategies. However, the implementation of microservices still encounters several challenges, such as the consumption of time and computational resources, scalability, orchestration, organization problems, and several further technical complications. Although there are procedures that facilitate the migration from a monolithic architecture to micro-services, none of them accurately quantifies performance differences. The current study aims primarily to analyze some related work that evaluated both architectures. Furthermore, we assess the performance and relationship between different variables of an application that runs in a monolithic structure compared to one of the micro-services. With this, the state-of-the-art review was initially conducted, which confirms the interest of the industry. Subsequently, two different scenarios were evaluated: the first one comprises a web application based on a monolithic architecture that operates on a virtual server with KVM, and the second one demonstrates the same web application based on a microservice architecture, but it runs in containers. Both situations were exposed to stress tests of similar characteristics and with the same hardware resources. For their validation, we applied the non-parametric regression mathematical model to explain the dependency relationship between the performance variables. The results provided a quantitative technical interpretation with precision and reliability, which can be applied to similar issues.},
DOI = {10.3390/app10175797}
}

@misc{mendes2021arquitetura,
  author       = {Mendes, Iasmin Santos},
  title        = {Arquitetura monolítica vs microsserviços: uma análise comparativa},
  year         = {2021},
  note         = {Trabalho de Conclusão de Curso (Bacharelado em Engenharia de Software) — Universidade de Brasília, Brasília, 2021},
  url          = {https://bdm.unb.br/handle/10483/30715}
}

@mastersthesis{PereiraDiniz2022,
  author       = {Lucas Gabriel Nerys Pereira and Luciana Mara Freitas Diniz},
  title        = {Comparativo entre Arquitetura Monolítica e Arquitetura de Microsserviços},
  school       = {Pontifícia Universidade Católica de Minas Gerais},
  year         = {2022},
  address      = {Betim, MG},
  note         = {Trabalho de Conclusão de Curso (Sistemas de Informação) - PUC Minas, Unidade Betim, 2º semestre de 2022},
  abstract     = {A definição da arquitetura a ser utilizada em um software é um passo de suma importância, que tem desdobramentos ao longo de todo o ciclo de vida do software, mas essa escolha vai muito além de preferências, é preciso entender o cenário de utilização para decidir de forma assertiva, além das expectativas que o software precisa satisfazer. Buscando clarear esse processo de decisão, uma comparação entre microsserviços e monolito é defendida por meio deste trabalho, através de uma revisão bibliográfica para compreender os conceitos de arquitetura de softwares, arquitetura monolítica e de microsserviços, além de expor as opiniões de especialistas da área, seguida de uma comparação prática entre esses estilos arquiteturais, com o desenvolvimento de dois servidores idênticos, implementados nas diferentes arquiteturas citadas. E por fim, a execução de casos de testes para colher evidências e medir o desempenho de ambas arquiteturas. O resultado obtido permitiu a emissão de uma conclusão sobre a melhor utilização das arquiteturas em questão, baseado nos ambientes criados para os testes e o escopo deste trabalho.},
  keywords     = {TCC, Sistemas de Informação, Arquitetura de Software, Microsserviços, Arquitetura Monolítica, PUC Minas Betim},
  url          = {https://bib.pucminas.br/pergamumweb/vinculos/000018/00001811.pdf},
  howpublished = {TCC Graduação em Sistemas de Informação},
  type         = {Trabalho de Conclusão de Curso}
}

@article{Salaheddin2022,
author = {Salaheddin, Nada and Ahmed, Nuredin},
year = {2022},
month = {10},
pages = {484-490},
title = {MICROSERVICES VS. MONOLITHIC ARCHITECTURES [THE DIFFERENTIAL STRUCTURE BETWEEN TWO ARCHITECTURES]},
volume = {4},
journal = {MINAR International Journal of Applied Sciences and Technology},
doi = {10.47832/2717-8234.12.47}
} 

@misc{fowler2015monolithfirst,
  author       = {Martin Fowler},
  title        = {MonolithFirst},
  year         = {2015},
  url          = {https://martinfowler.com/bliki/MonolithFirst.html},
}

@inproceedings{Gamma1993,
author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
year = {1993},
month = {01},
pages = {406-431},
title = {Design Patterns: Abstraction and Reuse of Object-Oriented Design},
isbn = {978-3-642-63970-8},
doi = {10.1007/978-3-642-48354-7_15}
}

@inproceedings{Aversano2007,
author = {Aversano, L. and Canfora, Gerardo and Cerulo, Luigi and Grosso, Concettina and Di Penta, Massimiliano},
year = {2007},
month = {09},
pages = {385-394},
title = {An empirical study on the evolution of design patterns},
doi = {10.1145/1287624.1287680}
}

@book{majors2022observability,
  title={Observability Engineering},
  author={Majors, C. and Fong-Jones, L. and Miranda, G.},
  isbn={9781492076414},
  url={https://books.google.com.br/books?id=KGZuEAAAQBAJ},
  year={2022},
  publisher={O'Reilly Media}
}

@thesis{kuusijarvi2024,
  author      = {Iiro Kuusijärvi},
  title       = {Introduction to Modern Observability},
  type        = {Bachelor's Thesis},
  institution = {Haaga-Helia University of Applied Sciences},
  year        = {2024},
  pages       = {20},
  abstract    = {When we are building software and services, we are building something for others. This necessitates creating and expressing (shared) understanding about what we are trying to. This includes anything and everything from the purpose of the service to our specific work aimed at expressing this understanding - which all work is. For example, when we write a simple Create-Read-Update-Delete request handler logic, this is part of expressing understanding about the service itself. Understanding is often expressed through many abstraction layers. It can be testing, documentation, and the code itself and so on. This paper describes a particular form of abstraction for expressing understanding where we observe the software and its users from the outside in - service acts as a black box with given user inputs and outputs generated by what is called "observability". The topic is motivated by the idea that most complete understanding of the software should be on the most curious person. Observability should allow for the most curious persons to dive deep into the service, asking arbitrary questions from it, questions it was not designed to answer explicitly. Software developers desire to understand in technical shapes and colors. For example, asking such questions from a given service and data like "how many items do the 99th percentile users usually have in their cart on average?", or "how do cart sizes correlate with page load times?" to generate understanding about the most important customers for the service, and from this technical angle, observability is approached in this study. Before we can start interrogating systems, we have to fit them for this new way of looking at them. This requires new approaches in the context of distributed systems - any software that cannot reason about asynchronicity and timing assumptions turns into a distributed system. These systems are usually modeled as event-based systems, where each interaction creates an event that is sent to downstream services for further processing. This paper applies this event-based design to logging, and models logging as merely another event in this system - an expression of an atomic unit of work just like any other. We first build a context between monoliths and distributed systems, and then sketch a model of traditional and modern observability fundamentals. To highlight the differences, we proceed to build an example over this theory of a practical issue (logging) through a hands-on comparison of string and custom data structure based logging, in order to show the benefits of aligning the logging type with the event based model.},
  keywords    = {Observability, Distributed Systems, Software Engineering, Logging, Microservices},
  url         = {https://www.theseus.fi/handle/10024/858551},
  note        = {Degree: Bachelor of Business Administration}
}

@article{bueno2022,
  author       = {Bueno, Lucas Eduardo Neuhaus},
  title        = {Monitoramento de dispositivos em rede utilizando Zabbix e Grafana},
  year         = {2022},
  journal      = {Instituto Federal de Educação, Ciência e Tecnologia Farroupilha},
  type         = {Artigo Científico},
  institution  = {Instituto Federal Farroupilha - Campus Panambi},
  address      = {Brasil},
  abstract     = {Monitorar uma rede de computadores resume-se em coletar informações sobre a eficiência de serviços e dispositivos que operam dentro de uma única infraestrutura, seja residencial ou organizacional. Monitorar o comportamento de uma rede torna-se uma prática essencial para assegurar o seu funcionamento contínuo, garantindo assim, a melhor qualidade possível para atender a demanda onde é aplicada. É notável que atualmente praticamente todas as organizações possuem infraestruturas de redes internas, tornando-se indispensável o acompanhamento do status dos serviços (e-mail, sites) e equipamentos (servidores, switches) envolvidos. O objetivo desta dissertação é apresentar um estudo e implantação das ferramentas Zabbix e Grafana visando monitorar dispositivos em uma rede doméstica.},
  abstract-en  = {Monitoring a computer network boils down to collecting information about the efficiency of services and devices that operate within a single infrastructure, whether residential or organizational. Monitoring the behavior of a network becomes an essential practice to ensure its continuous operation, thus ensuring the best possible quality to meet the demand where it is applied. It is notable that currently practically all organizations have internal network infrastructures, making it essential to monitor the status of the services (e-mail, websites) and equipment (servers, switches) involved. The objective of this dissertation is to present a study and implementation of Zabbix and Grafana tools in order to monitor devices in a home network.},
  keywords     = {Redes de computadores, Zabbix, Grafana, Monitoramento de redes},
  language     = {Portuguese},
  url          = {https://arandu.iffarroupilha.edu.br/handle/itemid/254},
  note         = {Orientador: Thiago da Silva Weingartner},
  howpublished = {Graduação em Sistemas para Internet, Instituto Federal Farroupilha}
}

@thesis{goncalves2024,
  author       = {Gonçalves, Gabriel de Castro},
  title        = {Grafana como uma ferramenta de visualização de monitoramento de redes de computadores},
  type         = {Trabalho de Conclusão de Curso},
  year         = {2024},
  institution  = {Pontifícia Universidade Católica de Goiás},
  address      = {Goiás, Brasil},
  abstract     = {Este trabalho tem como objetivo geral desenvolver um estudo da ferramenta Grafana para descrever seu funcionamento e mostrar como seu uso facilita a interpretação e a compreensão dos dados monitorados. Os resultados permitiram concluir que a utilização de ferramentas de monitoramento deixa a organização preparada para verificar o tráfego da rede e qual o melhor caminho a seguir com as informações que se tem. Assim, também se tem uma segurança extra, graças ao monitoramento, pois o mesmo faz uma varredura e verifica o que está sendo trafegado na rede e como está sendo esse tráfego. O Grafana desempenha um papel importante na melhoria do monitoramento de rede, permitindo aos administradores tomarem decisões, otimizar o desempenho e garantir a confiabilidade das operações da rede. Sua capacidade de visualização de dados, alertas em tempo real e integração com várias fontes de dados o tornam uma ferramenta valiosa para manter o funcionamento seguro das redes modernas.},
  abstract-en  = {This work has the general objective of developing a study of the Grafana tool to describe its operation and show how its use facilitates the interpretation and understanding of monitored data. As the study is ongoing, the conclusion is partial. It was possible to conclude that the use of monitoring tools leaves the organization prepared to check network traffic and the best path forward with the information available. Thus, there is also extra security, thanks to monitoring, as it scans and checks what is being trafficked on the network and how this traffic is going. Grafana plays an important role in improving network monitoring, enabling administrators to make decisions, optimize performance, and ensure the reliability of network operations. Its data visualization capabilities, real-time alerts, and integration with multiple data sources make it a valuable tool for keeping modern networks running securely.},
  keywords     = {Monitoramento de redes de computadores, Redes de computadores, Segurança de dados, Segurança da informação, Grafana},
  language     = {Portuguese},
  url          = {https://repositorio.pucgoias.edu.br/jspui/handle/123456789/7977},
  note         = {Orientador: Solange da Silva; Banca: Wilmar Oliveira de Queiroz, Fábio Barbosa Rodrigues},
  school       = {Escola Politécnica, PUC Goiás},
  howpublished = {TCC Ciência da Computação}
}

@article{kumar2022grafana,
  author    = {Sunil Kumar S H and Saravanan C},
  title     = {A Comprehensive Study on Data Visualization Tool - Grafana},
  journal   = {International Journal of Advanced Research in Computer and Communication Engineering},
  year      = {2022},
  volume    = {11},
  number    = {5},
  pages     = {50--54},
  institution = {RV College of Engineering, Bengaluru, India},
  note      = {Available at: \url{https://ijarcce.com/wp-content/uploads/2022/06/IJARCCE.2022.11519.pdf}},
}

@article{dhane2024application,
  title={Application Monitoring using Prometheus and Grafana},
  author={Dhane, Abhijeet and Joshi, Atharva and Borgaonkar, Chinmay and Deshpande, Manas and Patil, Pravin},
  journal={International Journal of Engineering Research in Computer Science and Engineering (IJERCSE)},
  year={2024},
  month={August},
  day={8},
  url={https://www.ijercse.com/application-monitoring-using-prometheus.php},
  abstract={In today’s fast-paced digital world, ensuring the smooth operation of critical applications has become more important than ever before. With increase in user expectations and ever-increasing competition, even minor downtime or performance issues can lead to significant losses in revenue, reputation and customer trust. To prevent such outcomes, organizations must proactively monitor their applications and detect potential issues before they impact users. Application monitoring involves continuously tracking various metrics associated with application’s performance and availability. Traditional monitoring approaches mainly include relying on manually checking the system and periodic reporting which can be time consuming, error-prone and reactive. In contrast, modern monitoring tools leverage automation, machine learning, and real-time analytics to enable faster detection, diagnosis, and resolution of issues. Prometheus and Grafana are two popular open-source tools that have gained widespread adoption in recent years for application monitoring purposes. Prometheus is a powerful metric collection and query engine that enables organizations to capture granular data about application behavior and infrastructure health. Grafana, on the other hand, is a flexible visualization platform that allows users to create custom dashboards, alerts, and reports based on Prometheus (and other) data sources.}
}

@mastersthesis{Salustiano2023,
    author = {SALUSTIANO, Lucas Chaves Salustiano},
    title = {Um estudo comparativo entre ferramentas de monitoramento de Containers Docker},
    school = {Universidade Federal de Campina Grande},
    year = {2023},
    month = {feb},
    url = {http://dspace.sti.ufcg.edu.br:8080/jspui/handle/riufcg/29337},
    abstract = {The use of containers has been widely adopted in the technology industry due to their flexibility and scalability. However, container monitoring is a crucial task to ensure system availability and performance. Therefore, there is a wide variety of monitoring tools available for various use cases and scopes. In this study, two of these tools, Prometheus and NetData, will be compared, both being pointed out by the Cloud Native Computing Foundation (CNCF) as two of the projects with the most contributors in 2022 [4]. The evaluation criteria will be five: real-time monitoring, baseline performance indicator, network performance monitoring, data visualization, and alerting. In the end, it was concluded that NetData has a slight advantage over Prometheus because it is more limited in aspects such as network performance monitoring and data visualization.},
    type = {Disserta{\c{c}}{\~a}o de Mestrado},
    language = {portuguese}
}

@article{Sobri2022,
author = {Sobri, Nur and Abas, Mohamad and Megat Ali, Megat Syahirul Amin and Tahir, Noorita and Zabidi, Azlee and Rizman, Zairi},
year = {2022},
month = {08},
pages = {566},
title = {A Study of Database Connection Pool in Microservice Architecture},
volume = {6},
journal = {JOIV : International Journal on Informatics Visualization},
doi = {10.30630/joiv.6.2-2.1094}
}

@article{Kanthed2023,
author = {Kanthed, Surbhi},
year = {2023},
month = {01},
pages = {1084-1091},
title = {Redis vs. Memcached in Microservices Architectures: Caching Strategies},
volume = {4},
journal = {International Journal of Multidisciplinary Research and Growth Evaluation.},
doi = {10.54660/.IJMRGE.2023.4.3.1084-1091}
}

@ARTICLE{9717259,
  author={Blinowski, Grzegorz and Ojdowska, Anna and Przybyłek, Adam},
  journal={IEEE Access}, 
  title={Monolithic vs. Microservice Architecture: A Performance and Scalability Evaluation}, 
  year={2022},
  volume={10},
  number={},
  pages={20357-20374},
  keywords={Microservice architectures;Computer architecture;Scalability;Business;Companies;Java;Complexity theory;Software architecture;microservices;monolith;software measurement;benchmarking;performance;scalability;cloud computing;Azure},
  doi={10.1109/ACCESS.2022.3152803}}

